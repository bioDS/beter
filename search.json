[{"path":"https://biods.github.io/beter/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Jiří Moravec Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biods.github.io/beter/articles/beter.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to beter","text":"Currently, beter available github. install github, type:","code":"devtools::install_github(\"biods/beter\")"},{"path":[]},{"path":"https://biods.github.io/beter/articles/beter.html","id":"building-beast2-xml-is-tedious","dir":"Articles","previous_headings":"Rationale","what":"Building BEAST2 XML is tedious","title":"Introduction to beter","text":"BEAST2 great tool phylogenetic analysis. contains large amount models, even models available BEAST2 packages. run analysis BEAST2, create XML file detail specifies kind models using, together parameters, priors, operators . tedious hand BEAST2 provides GUI tool called BEAUTi. However, BEAST2 packages contain BEAUTi templates, required BEAUTi GUI. even , configurations available GUI manual editing required. need run multiple analyses, data pipeline, just want reproducible research, GUI tool ideal need build XMLs programatically.","code":""},{"path":"https://biods.github.io/beter/articles/beter.html","id":"current-tools-are-insufficient","dir":"Articles","previous_headings":"Rationale","what":"Current tools are insufficient","title":"Introduction to beter","text":"Multiple tools already exist purpose, namely BeastMaster, beastling babette. work great need run one supported analysis. run brand new model developing new BEAST2 package, edit XML manually roll sollution involving regular expressions.","code":""},{"path":"https://biods.github.io/beter/articles/beter.html","id":"beter-provides-flexibility","dir":"Articles","previous_headings":"Rationale","what":"beter provides flexibility","title":"Introduction to beter","text":"end, tool future proof support new packages editing XMLs manually required. beter package forced edit XMLs, don’t want edit . short, beter package allows : * write XML templates {{ mustache }} tags * {{ mustache }} tags replaced values TOML config * structure TOML config additional subconfigs","code":""},{"path":"https://biods.github.io/beter/articles/beter.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Introduction to beter","text":"Often, need run file changes: new sequences added bump number generations increase ESS Start taking functional XML, can create BEAUTi take provided example XML BEAST package creators. primates.xml. create beter template, simply replace elements {{ mustache }} tags: also replace every occurence idref='primates' @primates idref='{{alignment_id}}' @{{alignment_id}} various models BEAST2 refer alignment data block. Now running: beter replace {{chain_length}} value specified parameters argument. {{{sequences}}} tags special replaced data block sequences. {{alignment_id}} tag also special variable, alginment_id constructed sequence file passed alignment parameter (case primates.fasta). allows programatically create BEAST2 XMLs beter templates. difference two {{ three {{{ compound brackets {{{ interpret XML tags parsed , {{ tries escape special characters.","code":"<!--primates.xml--> <beast> ... <data id=\"primates\" dataType=\"nucleotide\">     <sequence taxon=\"Tarsius_syrichta\">         AAGTTTCATTGGAGCCACCACTCTTATAATTGCCCATGGCCTCACCTCCTCCCTATTAT         TTTGCCTAGCAAATACAAACTACGAACGAGTCCACAGTCGAACAATAGCACTAGCCCGT         GGCCTTCAAACCCTATTACCTCTTGCAGCAACATGATGACTCCTCGCCAGCTTAACCAA         CCTGGCCCTTCCCCCAACAATTAATTTAATCGGTGAACTGTCCGTAATAATAGCAGCAT     <\/sequence> ... <\/data> ... <run spec=\"MCMC\" id=\"mcmc\" chainLength=\"5000000\" preBurnin=\"50000\"> ... <\/beast> <!--template.xml--> <beast> {{{sequences}} ... <run spec=\"MCMC\" id=\"mcmc\" chainLength=\"{{chain_length}}\" preBurnin=\"50000\"> ... <\/beast> beter::process_template(     \"template.xml\", \"primates.xml\",     alignment = \"primates.fasta\",     parameters = list(\"chain_length\"=5*10^6)     )"},{"path":"https://biods.github.io/beter/articles/config.html","id":"what-is-config","dir":"Articles","previous_headings":"","what":"What is config?","title":"Understanding configuration files","text":"Configs beter configuration files, partners XML templates. human readability, instead XML, beter configs written TOML language, consist three parts: xml, templates defaults. sample config might look like : purpose beter configs store default values parameters, instead pass process_template function, store chunks XML code. templates, BEAST2 XML can chopped individual models (required), can defined single file, together parameters, priors, operators loggers. Using templates, analysis can easily redefined just selection particular models, like example, clock_model specified config file specifies model particulars.","code":"[xml] operators = \"\"\"         <operator id='uniform' spec='Uniform' weight=\"{{tree_weight}}\" tree=\"@tree\"/>         \"\"\"  [templates] clock_model = \"clock_strict.toml\"  [defaults] chain_length = 1e5 tree_weight = 10"},{"path":"https://biods.github.io/beter/articles/config.html","id":"parsing-rules","dir":"Articles","previous_headings":"","what":"Parsing rules","title":"Understanding configuration files","text":"beter configs consist three parts, [xml] block, [templates] block [defaults] block. block consist series items, form name = value. [xml] block used XML chunks, can use three quotation marks \"\"\" multi-line value. chunks can contain tags \"{{...}}\" evaluated first placed template. [defaults] used default values tags, XML template XML chunks contained config. can overriden process_template call passing list values using parameter variable: Finally, [templates] block allow using additional subconfigs. parsing gets little difficult. using subconfigs, behaviour [xml] [defaults] block differs: [defaults] subconfig name replaced (overriden) [defaults] config (xml chunks evaluated context) [xml] subconfig added [xml] config allows subconfig define chunks loggers, operators parameters particular model, collected inserted XML template. insert collected values (fact, vector, numbers = [1, 2, 3, 4, 5], need use special form tag XML template: {{#name}}{{{.}}}{{/name}}. example, vector numbers, use result : translation.","code":"# default of \"chain_length\" was set to 1e5  pars = list(\"chain_length\" = 2e5) beter::process_template(template, output, config, parameters=parameters) # template is evaluated with \"chain_length\" set to 2e5 {{#numbers}}     {{{.}}} {{/numbers}} 1     2     3     4     5"},{"path":"https://biods.github.io/beter/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiří Moravec. Author, maintainer.","code":""},{"path":"https://biods.github.io/beter/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moravec J (2022). beter: BEAST Templates R. https://biods.github.io/beter/, https://github.com/biods/beter.","code":"@Manual{,   title = {beter: BEAST Templates in R},   author = {Jiří Moravec},   year = {2022},   note = {https://biods.github.io/beter/, https://github.com/biods/beter}, }"},{"path":"https://biods.github.io/beter/index.html","id":"beter","dir":"","previous_headings":"","what":"BEAST Templates in R","title":"BEAST Templates in R","text":"Create BEAST2 XML files individual XML chunks using {{ moustache }} templating system TOML configuration files. beter allows : * write XML templates {{ mustache }} tags * {{ mustache }} tags replaced values TOML config * structure TOML config additional subconfigs See https://biods.github.io/beter/ information.","code":""},{"path":"https://biods.github.io/beter/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"BEAST Templates in R","text":"","code":"devtools::install_github(\"biods/beter\")"},{"path":"https://biods.github.io/beter/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"BEAST Templates in R","text":"Lets (simplistic) BEAST2 XML required parts. often need run file different number generations often turns first run didn’t enough ESS. can easily done replacing specific number chainLength {{ mustache }} tag: writing TOML config : Now running: {{chain_length}} get replaced 5000. Instead replacing number, can insert whole XML chunks. way can programatically create templates values models require.","code":"<!--template.xml--> <xml> ... <run id=\"mcmc\" spec=\"MCMC\" chainLength=\"{{chain_length}}\"> ... <\/xml> # config.toml [defaults] chain_length = 5000 library(beter) process_template(\"template.xml\", \"config.toml\", \"result.xml\")"},{"path":"https://biods.github.io/beter/reference/basename_sans_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Basename without extension — basename_sans_ext","title":"Basename without extension — basename_sans_ext","text":"Combination [base::basename()] [tools::file_path_sans_ext()].","code":""},{"path":"https://biods.github.io/beter/reference/basename_sans_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basename without extension — basename_sans_ext","text":"","code":"basename_sans_ext(path)"},{"path":"https://biods.github.io/beter/reference/basename_sans_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basename without extension — basename_sans_ext","text":"path filepath","code":""},{"path":"https://biods.github.io/beter/reference/basename_sans_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basename without extension — basename_sans_ext","text":"basename without extension","code":""},{"path":"https://biods.github.io/beter/reference/basename_sans_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basename without extension — basename_sans_ext","text":"","code":"beter:::basename_sans_ext(\"folder/file.extension\") # returns \"file\" #> [1] \"file\""},{"path":"https://biods.github.io/beter/reference/beter_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set options for the beter package — beter_options","title":"Set options for the beter package — beter_options","text":"Set options affect behaviour `beter` package.","code":""},{"path":"https://biods.github.io/beter/reference/beter_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set options for the beter package — beter_options","text":"","code":"beter_options(..., scientific)"},{"path":"https://biods.github.io/beter/reference/beter_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set options for the beter package — beter_options","text":"... positional arguments ignored scientific older version BEAST2 support scientific format XMLs integer long parameters thus default, scientific notation (either toml config, specified R) unrolled. setting `scientific = TRUE`, scientific notation preserved using native R's auto-conversion (using `.character`).","code":""},{"path":"https://biods.github.io/beter/reference/find_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Find  moustache  tags. — find_tags","title":"Find  moustache  tags. — find_tags","text":"Find  moustache  tags string file. find_tags_str find tags string. find_tags_xml find_tags_toml find tags file using apropriate way read . Finally, find_tags call mentioned functions depending input.","code":""},{"path":"https://biods.github.io/beter/reference/find_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find  moustache  tags. — find_tags","text":"","code":"find_tags(template)  find_tags_xml(template)  find_tags_toml(template)  find_tags_str(template)"},{"path":"https://biods.github.io/beter/reference/find_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find  moustache  tags. — find_tags","text":"template String represents path xml, toml file text contain tags. find_tags function, string path existing file, first read using TOML parser plain text depending extension file .toml .xml.","code":""},{"path":"https://biods.github.io/beter/reference/find_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find  moustache  tags. — find_tags","text":"list  moustache  tags","code":""},{"path":"https://biods.github.io/beter/reference/find_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find  moustache  tags. — find_tags","text":"","code":"find_tags(\"Foo bar {{baz}}\") #> [1] \"baz\""},{"path":"https://biods.github.io/beter/reference/format_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric elements in list to string — format_list","title":"Convert numeric elements in list to string — format_list","text":"Recursively converts numeric elements list string using `format` function. done guarantee scientific notation used.","code":""},{"path":"https://biods.github.io/beter/reference/format_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric elements in list to string — format_list","text":"","code":"format_list(x, scientific = FALSE, trim = TRUE)"},{"path":"https://biods.github.io/beter/reference/format_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric elements in list to string — format_list","text":"x list scientific whether keep scientific notation trim suppress justifying values right","code":""},{"path":"https://biods.github.io/beter/reference/format_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numeric elements in list to string — format_list","text":"formatted list","code":""},{"path":"https://biods.github.io/beter/reference/guess_datatype.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess datatype from sequences — guess_datatype","title":"Guess datatype from sequences — guess_datatype","text":"Guess data type sequences. Currently two data types supported: nucleotide standard","code":""},{"path":"https://biods.github.io/beter/reference/guess_datatype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess datatype from sequences — guess_datatype","text":"","code":"guess_datatype(sequences)"},{"path":"https://biods.github.io/beter/reference/guess_datatype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess datatype from sequences — guess_datatype","text":"sequences list strings","code":""},{"path":"https://biods.github.io/beter/reference/guess_datatype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess datatype from sequences — guess_datatype","text":"datatype","code":""},{"path":"https://biods.github.io/beter/reference/guess_number_of_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess the number of states — guess_number_of_states","title":"Guess the number of states — guess_number_of_states","text":"Guess number states sequences","code":""},{"path":"https://biods.github.io/beter/reference/guess_number_of_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess the number of states — guess_number_of_states","text":"","code":"guess_number_of_states(sequences)"},{"path":"https://biods.github.io/beter/reference/guess_number_of_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess the number of states — guess_number_of_states","text":"sequences list strings","code":""},{"path":"https://biods.github.io/beter/reference/guess_number_of_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess the number of states — guess_number_of_states","text":"number states","code":""},{"path":"https://biods.github.io/beter/reference/is.empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether list is null or empty — is.empty","title":"Test whether list is null or empty — is.empty","text":"Test whether list null empty","code":""},{"path":"https://biods.github.io/beter/reference/is.empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether list is null or empty — is.empty","text":"","code":"is.empty(x)"},{"path":"https://biods.github.io/beter/reference/is.empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether list is null or empty — is.empty","text":"x list","code":""},{"path":"https://biods.github.io/beter/reference/is.empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether list is null or empty — is.empty","text":"true/false","code":""},{"path":"https://biods.github.io/beter/reference/join.html","id":null,"dir":"Reference","previous_headings":"","what":"join strings — join","title":"join strings — join","text":"Similar paste, ignores NULL, NA empty strings.","code":""},{"path":"https://biods.github.io/beter/reference/join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"join strings — join","text":"","code":"join(..., sep = \" \", collapse = NULL)"},{"path":"https://biods.github.io/beter/reference/join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"join strings — join","text":"... one R objects, converted character vectors. sep character string separate terms.  \"NA_character_\". collapse optional character string separate results.  \"NA_character_\".","code":""},{"path":"https://biods.github.io/beter/reference/join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"join strings — join","text":"character vector concatenated values. See paste.","code":""},{"path":"https://biods.github.io/beter/reference/join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"join strings — join","text":"","code":"beter:::join(\"foo\", NULL, NA, \"\", \"bar\") # \"foo bar\" #> [1] \"foo bar\""},{"path":"https://biods.github.io/beter/reference/list2toml.html","id":null,"dir":"Reference","previous_headings":"","what":"list to toml — list2toml","title":"list to toml — list2toml","text":"Convert list string vector represents TOML. item vector represents line TOML file.","code":""},{"path":"https://biods.github.io/beter/reference/list2toml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list to toml — list2toml","text":"","code":"list2toml(x)"},{"path":"https://biods.github.io/beter/reference/list2toml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list to toml — list2toml","text":"x named list","code":""},{"path":"https://biods.github.io/beter/reference/list2toml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list to toml — list2toml","text":"string vector representing individual lines TOML representation x.","code":""},{"path":"https://biods.github.io/beter/reference/list2toml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"list to toml — list2toml","text":"list2toml process structured lists recursively first processing non-list members processing remaining items list type using another call lit2toml. calls, name item used parent_name.","code":""},{"path":"https://biods.github.io/beter/reference/list2toml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list to toml — list2toml","text":"","code":"config = list(     \"xml\" = list(\"chunk\" = \"<xml>{{tag}}<\/xml>\"),     \"templates\" = list(),     \"defaults\" = list(\"tag\" = \"Just another tag in the TOML!\")      ) list2toml(config) #> [1] \"[xml]\"                                   #> [2] \"chunk = \\\"<xml>{{tag}}<\/xml>\\\"\"          #> [3] \"\"                                        #> [4] \"[templates]\"                             #> [5] \"\"                                        #> [6] \"[defaults]\"                              #> [7] \"tag = \\\"Just another tag in the TOML!\\\"\" #> [8] \"\""},{"path":"https://biods.github.io/beter/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two lists — merge","title":"Merge two lists — merge","text":"Additive non-additive merging lists. add merge lists additively, means named items shared lists added concatenated. merge non-additive merging named items list first argument replaced items list second argument.","code":""},{"path":"https://biods.github.io/beter/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two lists — merge","text":"","code":"merge(list1, list2)  add(list1, list2)"},{"path":"https://biods.github.io/beter/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two lists — merge","text":"list1 list list2 list","code":""},{"path":"https://biods.github.io/beter/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two lists — merge","text":"merged list","code":""},{"path":"https://biods.github.io/beter/reference/mkdir.html","id":null,"dir":"Reference","previous_headings":"","what":"An utility function with an effect similar to Unix mkdir -p.\nRecursively create directory. If directory exists, do nothing. — mkdir","title":"An utility function with an effect similar to Unix mkdir -p.\nRecursively create directory. If directory exists, do nothing. — mkdir","text":"utility function effect similar Unix mkdir -p. Recursively create directory. directory exists, nothing.","code":""},{"path":"https://biods.github.io/beter/reference/mkdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An utility function with an effect similar to Unix mkdir -p.\nRecursively create directory. If directory exists, do nothing. — mkdir","text":"","code":"mkdir(dir)"},{"path":"https://biods.github.io/beter/reference/mkdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An utility function with an effect similar to Unix mkdir -p.\nRecursively create directory. If directory exists, do nothing. — mkdir","text":"dir directory","code":""},{"path":"https://biods.github.io/beter/reference/mkdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An utility function with an effect similar to Unix mkdir -p.\nRecursively create directory. If directory exists, do nothing. — mkdir","text":"","code":"tmpdir = tempdir() beter:::mkdir(tmpdir) # dir already exists, no error or warning is reported"},{"path":"https://biods.github.io/beter/reference/parse_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively parse TOML config\nFirst recursively parse any TOML configs linked in the template block and then process XML\nchunks by substituting the  moustache  tags using the content of the default block and\nany parameters from the parent TOML config. — parse_config","title":"Recursively parse TOML config\nFirst recursively parse any TOML configs linked in the template block and then process XML\nchunks by substituting the  moustache  tags using the content of the default block and\nany parameters from the parent TOML config. — parse_config","text":"two different ways parameters xml chunks sharing name merged. Parameters overwrite parameters name daughter config. means subtemplates/subconfigs can shared different TOML configs parametrized according need. hand, xml chunks name merged together list, makes possible different subtemplates define priors, operators logs, can put single point without replacing 's structures. makes possible build BEAST2 XML.","code":""},{"path":"https://biods.github.io/beter/reference/parse_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively parse TOML config\nFirst recursively parse any TOML configs linked in the template block and then process XML\nchunks by substituting the  moustache  tags using the content of the default block and\nany parameters from the parent TOML config. — parse_config","text":"","code":"parse_config(file, defaults = NULL)"},{"path":"https://biods.github.io/beter/reference/parse_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively parse TOML config\nFirst recursively parse any TOML configs linked in the template block and then process XML\nchunks by substituting the  moustache  tags using the content of the default block and\nany parameters from the parent TOML config. — parse_config","text":"file TOML config defaults parameters replace parameters default block","code":""},{"path":"https://biods.github.io/beter/reference/parse_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively parse TOML config\nFirst recursively parse any TOML configs linked in the template block and then process XML\nchunks by substituting the  moustache  tags using the content of the default block and\nany parameters from the parent TOML config. — parse_config","text":"list processed XML chunks daughter config     default parameter block","code":""},{"path":"https://biods.github.io/beter/reference/process_subtemplates.html","id":null,"dir":"Reference","previous_headings":"","what":"Process TOML subtemplates/subconfigs in the templates block — process_subtemplates","title":"Process TOML subtemplates/subconfigs in the templates block — process_subtemplates","text":"Process TOML subtemplates/subconfigs templates block","code":""},{"path":"https://biods.github.io/beter/reference/process_subtemplates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process TOML subtemplates/subconfigs in the templates block — process_subtemplates","text":"","code":"process_subtemplates(subtemplates, defaults)"},{"path":"https://biods.github.io/beter/reference/process_subtemplates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process TOML subtemplates/subconfigs in the templates block — process_subtemplates","text":"subtemplates list TOML subtemplates templates block defaults parameters","code":""},{"path":"https://biods.github.io/beter/reference/process_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Process an XML template with TOML config. — process_template","title":"Process an XML template with TOML config. — process_template","text":"process_template parse TOML config three different blocks, xml containing additional xml chunks processed independently, templates containing file paths relative parsed TOML config) additional TOML configs defaults contain default parameters main template, xml chunks contained TOML config subtemplates linked TOML config. xml chunks parameters substituted template according  moustache  tags.","code":""},{"path":"https://biods.github.io/beter/reference/process_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process an XML template with TOML config. — process_template","text":"","code":"process_template(   template,   output,   config = NULL,   alignment = NULL,   format = NULL,   parameters = NULL )"},{"path":"https://biods.github.io/beter/reference/process_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process an XML template with TOML config. — process_template","text":"template XML template  moustache  tags substituted according input parameters default parameters TOML config. output processed template config TOML config file containing default values  moustache  tags, XML chunks path additional TOML subconfigs/subtemplates. alignment sequence alignment format sequence alignment parameters replace parameters name TOML config TOML subconfigs/subtemplates","code":""},{"path":"https://biods.github.io/beter/reference/process_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process an XML template with TOML config. — process_template","text":"First function recursively parse TOML configs linked template block process XML chunks substituting  moustache  tags using content default block parameters parent TOML config. , processed XML chunks well values default block TOML config input parameters substituted XML template according present  moustache  tags. two different ways parameters xml chunks sharing name merged. Parameters overwrite parameters name daughter config. means subtemplates/subconfigs can shared different TOML configs parametrized according need. hand, xml chunks name merged together list, makes possible different subtemplates define priors, operators logs, can put single point without replacing 's structures. makes possible build BEAST2 XML. addition, alignment format FASTA NEXUS can specified inputted  sequences  tag. specified, alignmet data type guessed alignment id constructed alignment file.","code":""},{"path":"https://biods.github.io/beter/reference/process_xml_chunks.html","id":null,"dir":"Reference","previous_headings":"","what":"Process list of xml chunks — process_xml_chunks","title":"Process list of xml chunks — process_xml_chunks","text":"process xml chunks, replacing  moustache  tags parameters","code":""},{"path":"https://biods.github.io/beter/reference/process_xml_chunks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process list of xml chunks — process_xml_chunks","text":"","code":"process_xml_chunks(xml_chunks, parameters)"},{"path":"https://biods.github.io/beter/reference/process_xml_chunks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process list of xml chunks — process_xml_chunks","text":"xml_chunks list strings  moustache  tags parameters parameters substitute  moustache  tags","code":""},{"path":"https://biods.github.io/beter/reference/process_xml_chunks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process list of xml chunks — process_xml_chunks","text":"list processed xml chunks","code":""},{"path":"https://biods.github.io/beter/reference/read_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Read sequences from a file — read_sequences","title":"Read sequences from a file — read_sequences","text":"functions read sequence alignment file return named list sequences. Currently supported formats `fasta` `nexus`. Interleaved formats, sequences defined repeating blocks, supported.","code":""},{"path":"https://biods.github.io/beter/reference/read_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read sequences from a file — read_sequences","text":"","code":"read_sequences(file, format = NULL)  read_fasta(file)  read_nexus(file)"},{"path":"https://biods.github.io/beter/reference/read_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read sequences from a file — read_sequences","text":"file alignment format requested format","code":""},{"path":"https://biods.github.io/beter/reference/read_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read sequences from a file — read_sequences","text":"named list sequences","code":""},{"path":"https://biods.github.io/beter/reference/read_sequences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read sequences from a file — read_sequences","text":"function `[read_sequences]` tries guess correct format file extension. Alternatively, correct format can specified. Currently supported formats fasta nexus. Functions `[read_fasta]` `[read_nexus]` used read sequence alignment file.","code":""},{"path":"https://biods.github.io/beter/reference/read_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read sequences from a file — read_sequences","text":"","code":"seq1 = c(\"A\" = \"AAA\", \"B\" = \"BBB\", \"C\" = \"CCC\") fasta = tempfile(fileext = \".fasta\") writeLines(paste0(\">\", names(seq1), \"\\n\", seq1), fasta)  seq2 = read_sequences(fasta) seq3 = read_fasta(fasta) identical(seq1, seq2) #> [1] TRUE identical(seq1, seq3) #> [1] TRUE"},{"path":"https://biods.github.io/beter/reference/read_sequences_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper functions for reading alignment — read_sequences_helper","title":"Internal helper functions for reading alignment — read_sequences_helper","text":"functions used internally alignemnt read processed. tend extract proces sequences particular part text.","code":""},{"path":"https://biods.github.io/beter/reference/read_sequences_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper functions for reading alignment — read_sequences_helper","text":"","code":"parse_nexus_header(text)  parse_nexus_sequences(text)"},{"path":"https://biods.github.io/beter/reference/read_sequences_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper functions for reading alignment — read_sequences_helper","text":"text part sequence file parsed helper function","code":""},{"path":"https://biods.github.io/beter/reference/sequences2xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sequences to BEAST xml data block. — sequences2xml","title":"Convert sequences to BEAST xml data block. — sequences2xml","text":"functions uses internal mustache template convert named vector sequences XML data block BEAST.","code":""},{"path":"https://biods.github.io/beter/reference/sequences2xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sequences to BEAST xml data block. — sequences2xml","text":"","code":"sequences2xml(sequences, data = list())"},{"path":"https://biods.github.io/beter/reference/sequences2xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sequences to BEAST xml data block. — sequences2xml","text":"sequences parsed file data **optional** variables, specification datatype","code":""},{"path":"https://biods.github.io/beter/reference/sequences2xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert sequences to BEAST xml data block. — sequences2xml","text":"BEAST xml data block","code":""},{"path":"https://biods.github.io/beter/reference/sequences2xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert sequences to BEAST xml data block. — sequences2xml","text":"internal template uses two parameters, *alignment_id* *datatype*. *alignment_id* identifies particular alignment block important multiple input alignments used BEAST analysis. good practice might use file name sequences *alignment_id*. *datatype* much important tells BEAST kind data alignment represents. *beter* try guess common data types: *standard* (binary discrete states) *nucleotide* (DNA nucleotides), data type, \"datatype\" must specified.","code":""},{"path":"https://biods.github.io/beter/reference/sequences2xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert sequences to BEAST xml data block. — sequences2xml","text":"","code":"seq = c(\"A\" = \"ACTG\", \"B\" = \"CTGA\", \"C\" = \"TGAC\") sequences2xml(seq) #> [1] \"<data id=\\\"alignment\\\" dataType=\\\"nucleotide\\\">\\n    <sequence taxon=\\\"A\\\">ACTG<\/sequence>\\n    <sequence taxon=\\\"B\\\">CTGA<\/sequence>\\n    <sequence taxon=\\\"C\\\">TGAC<\/sequence>\\n<\/data>\"  sequences2xml(seq, data=list(\"alignment_id\" = \"seq\", \"datatype\"=\"nucleotide\") ) #> [1] \"<data id=\\\"seq\\\" dataType=\\\"nucleotide\\\">\\n    <sequence taxon=\\\"A\\\">ACTG<\/sequence>\\n    <sequence taxon=\\\"B\\\">CTGA<\/sequence>\\n    <sequence taxon=\\\"C\\\">TGAC<\/sequence>\\n<\/data>\""},{"path":"https://biods.github.io/beter/reference/settmpdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set a path to a specific directory. Path is restored once\nthe calling function/frame ends. — settmpdir","title":"Temporarily set a path to a specific directory. Path is restored once\nthe calling function/frame ends. — settmpdir","text":"Temporarily set path specific directory. Path restored calling function/frame ends.","code":""},{"path":"https://biods.github.io/beter/reference/settmpdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set a path to a specific directory. Path is restored once\nthe calling function/frame ends. — settmpdir","text":"","code":"settmpdir(dir)"},{"path":"https://biods.github.io/beter/reference/settmpdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily set a path to a specific directory. Path is restored once\nthe calling function/frame ends. — settmpdir","text":"dir directory","code":""},{"path":"https://biods.github.io/beter/reference/settmpdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily set a path to a specific directory. Path is restored once\nthe calling function/frame ends. — settmpdir","text":"","code":"dir = tempdir() test = function(){     beter:::settmpdir(dir)     print(getwd())     } test() # should print dir #> [1] \"/tmp/RtmpyOr5at\" print(getwd()) # back to normal #> [1] \"/tmp/RtmpyOr5at/file3a7e1e021d7f/reference\""},{"path":"https://biods.github.io/beter/reference/sort_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort named list — sort_named_list","title":"Sort named list — sort_named_list","text":"Reorder list according names.","code":""},{"path":"https://biods.github.io/beter/reference/sort_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort named list — sort_named_list","text":"","code":"sort_named_list(x, decreasing = FALSE)"},{"path":"https://biods.github.io/beter/reference/sort_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort named list — sort_named_list","text":"x list decreasing logical. sort increasing decreasing?","code":""},{"path":"https://biods.github.io/beter/reference/sort_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort named list — sort_named_list","text":"sorted list","code":""},{"path":"https://biods.github.io/beter/reference/write_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Write TOML config — write_config","title":"Write TOML config — write_config","text":"function write list TOML. fully fledged TOML writer used testing purposes.","code":""},{"path":"https://biods.github.io/beter/reference/write_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write TOML config — write_config","text":"","code":"write_config(x, file)"},{"path":"https://biods.github.io/beter/reference/write_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write TOML config — write_config","text":"x named list file path file TOML config written","code":""},{"path":"https://biods.github.io/beter/reference/write_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write TOML config — write_config","text":"","code":"config = list(     \"xml\" = list(\"chunk\" = \"<xml>{{tag}}<\/xml>\"),     \"templates\" = list(),     \"defaults\" = list(\"tag\" = \"Just another tag in the wall!\")      ) write_config(config, stdout()) #> [xml] #> chunk = \"<xml>{{tag}}<\/xml>\" #>  #> [templates] #>  #> [defaults] #> tag = \"Just another tag in the wall!\" #>"},{"path":"https://biods.github.io/beter/reference/write_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Write sequences to a file — write_sequences","title":"Write sequences to a file — write_sequences","text":"Write sequences file","code":""},{"path":"https://biods.github.io/beter/reference/write_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write sequences to a file — write_sequences","text":"","code":"write_sequences(seq, file = \"\", format = NULL, ...)  write_fasta(seq, file = \"\", nchar = 80)  write_nexus(seq, file = \"\", datatype = NULL, missing = NULL, gap = NULL)"},{"path":"https://biods.github.io/beter/reference/write_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write sequences to a file — write_sequences","text":"seq named vector sequences file character string naming file format **optional** write sequences format, currently supported formats `fasta` `nexus` ... **optional** parameters passed underlying function nchar **optional** number characters per line datatype **optional** type data missing **optional** symbol representing missing data gap **optional** symbol representing gap aligned sequence","code":""},{"path":"https://biods.github.io/beter/reference/write_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write sequences to a file — write_sequences","text":"","code":"seq1 = c(\"A\" = \"AAA\", \"B\" = \"BBB\", \"C\" = \"CCC\") fasta = tempfile(fileext = \".fasta\") write_fasta(seq1, fasta)  seq2 = read_fasta(fasta) identical(seq1, seq2) #> [1] TRUE"}]
